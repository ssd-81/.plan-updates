01-07-2025
- generics in golang
	- constraints in generics (implemented using interfaces)


02-07-2025
- go design ideas
	- tradeoffs
	- idioms
	- principles
- introduction to http 
	- what are clients and servers? 
	- what are protocols? 
	- net/http go package
	- need for servers in the first place

 
03-07-2025
- http clients
	-JSON and handling in go
	- json.Unmarshal() , json.Decode()
	- XML 
	- map[string]interface{} 



06-07-2025
- DNS 
	- what is DNS and why it is used?
	- worked on a problem on boot.dev to apply unpack a response using Unmarshal and then use it to get required value



07-07-2025
- URL
       - URLs are actually URIs 
       - URNs are also a thing
       - URLs are asymmetrically used because of their practicality 
      - structure of a URL
      - query parameters


08-07-2025
- HTTP Headers 
    -what are HTTP headers and why are they required
    - meta information carried by http headers (client, os , lang etc) 
    - status codes (most common being 200)
    - fundamental idea behind auth (API keys and interaction)
- HTTP Methods
	- GET (a safe method, cause it doesn't alter state of the server)
		- get a representation (read: copy) of resource of site
		- how to perform GET requests in go?
			- http.Get
			- http.Client-> http.NewRequest->Do (verbose, but important)
		
	- CRUD (create, read , update, delete)
		- the core of all backend applications (quite literlly)
		- HTTP methods map to CRUD actions by conventions
	- POST method ( generally, not a safe method; as it can create duplicates)
